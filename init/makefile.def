# test makefile for dmake stuff#.IMPORT .IGNORE : User CompilerOBJDIR = $(DIRSEPSTR)obj$(DIRSEPSTR)INCPATH += ::lib:# do RCS type of stuff#%: $(DIRSEPSTR)RCS$(DIRSEPSTR)%#	rcs_warn	#rcs_warn .PHONY :#	if ! `Exists -f $@`#		echo Error: $@ missing, needs to be checked out#		exit 1#	else#		echo Warning: $@ older than RCS version#	endif.IF $(Compiler)==Metrowerks	CC = mwcppc	AS = PPCAsm	LINK = mwlinkppc	LIBEXE = mwlinkppc	CFLAGS_DEBUG = -sym on -sym full	AFLAGS_DEBUG = -sym on	LFLAGS_DEBUG = -sym on	CFLAGS_OPT = -opt off	AFLAGS_OPT =	LFLAGS_OPT = 	CFLAGS += -w nopragmas,nounusedvar,nounusedarg -mpw_pointers -align mac68k -traceback $(CFLAGS_OPT) $(CFLAGS_DEBUG) $(INCPATH:^"-i ")	AFLAGS = $(AFLAGS_DEBUG) $(AFLAGS_OPT)	LFLAGS = $(LFLAGS_DEBUG) $(LFLAGS_OPT)	LIBFLAGS = -xm l $(LFLAGS_DEBUG) $(LFLAGS_OPT)	STD_LIBS = 	"{{MPW}}"MotoTools:libmoto "{{MWPPCLibraries}}MWCRuntime.Lib" "{{MWPPCLibraries}}InterfaceLib" "{{MWPPCLibraries}}ANSI C.PPC.Lib" "{{MWPPCLibraries}}MathLib" .ELIF $(Compiler)==MrC	CC = Mrc	AS = PPCAsm	LINK = PPCLink	LIBEXE = PPCLink	CFLAGS_DEBUG = -sym on -sym full	AFLAGS_DEBUG = -sym on	LFLAGS_DEBUG = -sym on	CFLAGS_OPT = -opt off	AFLAGS_OPT =	LFLAGS_OPT = 	CFLAGS = -i ::lib: -i ::includes: -w 17,7,2 -align mac68k -typecheck relaxed -target ppc -char unsigned $(CFLAGS_OPT)( $(CFLAGS_DEBUG)	AFLAGS = $(AFLAGS_DEBUG) $(AFLAGS_OPT)	LFLAGS = $(LFLAGS_DEBUG) $(LFLAGS_OPT)	LIBFLAGS = -xm l $(LFLAGS_DEBUG) $(LFLAGS_OPT)	STD_LIBS = 	"{PPCLibraries}"InterfaceLib.xcoff "{PPCLibraries}"StdCLib.xcoff "{PPCLibraries}"MathLib.xcoff "{PPCLibraries}"PPCCRuntime.o "{PPCLibraries}"StdCRuntime.o .ELIF $(Compiler)==Motorola	CC = mcc	AS = PPCAsm	LINK = PPCLink	LIBEXE = PPCLink	CFLAGS_DEBUG = -sym on -sym full	AFLAGS_DEBUG = -sym on	LFLAGS_DEBUG = -sym on	CFLAGS_OPT = -opt off	AFLAGS_OPT =	LFLAGS_OPT = 	CFLAGS += -Aalign_mac=1,char=unsigned,pascalstr=1 -D__useAppleExts__  $(CFLAGS_OPT) $(CFLAGS_DEBUG)	AFLAGS = $(AFLAGS_DEBUG) $(AFLAGS_OPT)	LFLAGS = $(LFLAGS_DEBUG) $(LFLAGS_OPT)	LIBFLAGS = -xm l $(LFLAGS_DEBUG) $(LFLAGS_OPT)	STD_LIBS = "{MPW}"MotoTools:libmoto "{PPCLibraries}"InterfaceLib.xcoff "{PPCLibraries}"StdCLib.xcoff "{PPCLibraries}"MathLib.xcoff "{PPCLibraries}"PPCCRuntime.o "{PPCLibraries}"StdCRuntime.o .END__.SILENT !:= $(.SILENT).SILENT   !:= yesLIBS := $(LIBS:B)#TEST_PROGS := $(TEST_PROGS:B)#PROGS := $(PROGS:B)LIB_LIBS = $(LIBS:+".lib")CLEAN_TARGS := $(CLEAN_TARGS) $(OBJDIR)Å.o $(PROGS) $(TEST_PRGS) $(LIB_LIBS:^"::lib:").SILENT !:= $(__.SILENT)# default target if none specified in Makefileall .PHONY: $(LIB_LIBS) $(PROGS) $(TEST_PROGS)	echo Done..SOURCE.o : ":obj:".SOURCE.lib : "::lib:".SOURCE.r : "::lib:"%.c.o : %.c ; 	$(CC) $(CFLAGS) -o $@ $<	%.a.o : %.a ;	$(AS) $(AFLAGS) -o $@ $<	%.r : %.rsrc ;	Derez $< > $@	.IF $(PROGS)$(PROGS) : $($(PROGS:b:u)_OBJS) $($(PROGS:b:u)_LIBS) $($(PROGS:b:u)_DATA)	echo $(PROGS:f:u)	if "$($(PROGS:b:u)_OBJS)" == ""		Echo "Error: no object files given for test program $(*:f:u)"		Exit 1	end	$(LINK) $(LFLAGS) -o $* $($(PROGS:b:u)_OBJS:^":obj:") $($(PROGS:b:u)_LIBS:^"::lib:") $(STD_LIBS)	if "$($(PROGS:b:u)_RESOURCES)" != ""		Rez $($(PROGS:b:u)_RESOURCES:^"::lib:") -m -rd -append -o $@	end	if "$(PROG_DIR)" != ""		move $(PROGS) $(PROG_DIR)	end	.END.IF $(TEST_PROGS)$(TEST_PROGS) : $($(TEST_PROGS:b:u)_OBJS) $($(TEST_PROGS:b:u)_LIBS) $($(TEST_PROGS:b:u)_DATA)	if "$($(TEST_PROGS:f:u)_OBJS)" == ""		Echo "Error: no object files given for test program $(*:f:u)"		Exit 1	end	$(LINK) $(LFLAGS) -o $* $($(TEST_PROGS:b:u)_OBJS:^":obj:") $($(TEST_PROGS:b:u)_LIBS:^"::lib:") $(STD_LIBS)	if "$($(TEST_PROGS:b:u)_RESOURCES)" != ""		Rez $($(TEST_PROGS:b:u)_RESOURCES:^"::lib:") -m -rd -append -o $@	end	.END.IF $(LIB_LIBS)TARG_OBJS = $($(LIB_LIBS:b:u)_OBJS:^":obj:")$(LIB_LIBS) : $($(LIB_LIBS:b:u)_OBJS)	if "$($(*:f:u)_OBJS)" == ""		Echo "Error: no object files given for library $(*:F:U)		Exit 1	end	$(LIBEXE) $(LIBFLAGS) $(TARG_OBJS) -o $@	.ENDclean .PHONY::	delete -i $(CLEAN_TARGS)